########################
# GLOBAL CONFIG PARAMS #
########################
log_level = info

########### 
# Capture #
###########

# Capture source. This is WIFF's data source. In can be a WIFF processor (as
# defined in another section), a capture file, a folder containing capture 
# files (they will be read in order of creation), a network interface name,
# or the index of a network interface in the list of all available interfaces.
capture_source = 0

# ByteBuffer Pool Size. This is number of megabytes to use as temporary storage
# for packet data retrieved from the capture source (except for processors).
# A larger pool gives WIFF more time to process packets, increase this number if
# you see a large packet drop rate.
pool_size = 200

# ByteBuffer Capacity. The size of each buffer in the pool. This must be greater
# than or equal to the number of bytes in the largest packet processed. The 
# theoretical max size is 65535 bytes.
buffer_capacity = 50000

# Optional tcp dump filter (not applied to data retrieved from processors)
tcpdump_filter = port 80

#############
# Consumers #
#############

# The number of threads that process incoming data
consumer_count = 1  

# The type of consumer
consumer_type = PacketConsumer

############
# Services #
############
# Services are objects to which all incoming data is sent. A service will
# extract the information it cares about and, at some point, send some
# processed data to a reporter.

# The list of services to which the incoming data will be sent
wiff.services = Stitching

# The Stitching service will stitch together related packets and sends the
# reporter defined as "rabbit" in the report section. If a related packet 
# is not seen for 20 seconds (cache time) the stream is considered complete. 
wiff.service.Stitching.type = WiffStitch
wiff.service.Stitching.cachetime = 20
wiff.service.Stitching.reporter = elastic

#############
# Reporters #
#############
# Reporters are responsible for transmitting data to external applications.
# The reporter below, "elastic", sends data to Elasticsearch

#report_interval < 1 means the class will determine the best time to report
wiff.reporter.elastic.type = ElasticsearchClient
wiff.reporter.elastic.host = 
wiff.reporter.elastic.port = 9200
wiff.reporter.elastic.report_interval = 1
wiff.reporter.elastic.parser = tcp 

###########
# Parsers #
###########
# Parsers can be used to transform data before it is sent by a reporter to an
# external application.

# The HTTP parser "tcp" will extract the headers and body (optional) from
# a tcp stream containing HTTP messages and format them using the Elasticsearch
# bulk API syntax.
wiff.parser.tcp.type = HTTPParser
wiff.parser.tcp.index_name = wiff
wiff.parser.tcp.include_body = true

